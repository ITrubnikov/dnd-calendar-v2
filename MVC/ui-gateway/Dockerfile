FROM golang:1.20 as builder

# Создайте и перейдите в директорию приложения.
WORKDIR /ui-gateway

# Получите зависимости приложения с помощью go mod.
# Это позволяет повторно использовать скачанные зависимости при сборке контейнера.
COPY go.mod ./
COPY go.sum ./
RUN go mod download

# Скопируйте локальный код в образ контейнера.
COPY . ./

# Скомпилируйте приложение.
# -o myapp : задает имя исполняемого файла
# . : компилирует пакет в текущей директории
RUN CGO_ENABLED=0 GOOS=linux go build -v -o main .

# Используйте официальный образ Debian slim для создания компактного продуктового контейнера.
# Если вы использовали alpine выше, вам также следует использовать alpine здесь.
FROM debian:buster-slim
RUN apt-get update && apt-get install -y ca-certificates && rm -rf /var/lib/apt/lists/*

# Скопируйте исполняемый файл в продуктовый образ из этапа сборки.
COPY --from=builder /ui-gateway/main /main

# Сервис должен слушать переменную окружения $PORT.
# Это значение по умолчанию упрощает разработку локально.
ENV PORT 8080

# Запустите веб-сервис при старте контейнера.
CMD ["/main"]